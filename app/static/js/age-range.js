// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(["util/type", "helper/events", "status-bar", "jquery", "tpl!./age-range"], function(type, Events, statusBar, $, rangeTemplate) {
    var AgeRange;
    AgeRange = (function() {
      Events.mixin(AgeRange);

      AgeRange.Events = type.createEnum(["USER_DONE"]);

      function AgeRange(options) {
        this.validate = __bind(this.validate, this);
        var _this = this;
        this.config = options.config;
        this.options = options || {};
        this.result = null;
        this.list = ['lower', 'upper'];
        this.el = document.createElement('div');
        this.el.className = 'age-range';
        this.el.style.display = 'none';
        if (this.options.noModify) {
          this.config.upper = false;
          this.config.lower = false;
        }
        this.el.innerHTML = rangeTemplate(this.config);
        document.body.appendChild(this.el);
        this.form = {
          upper: this.el.querySelector('.upper'),
          lower: this.el.querySelector('.lower'),
          form: this.el.querySelector('form')
        };
        this.form.form.onsubmit = function(e) {
          e.preventDefault();
          if (!_this.options.noModify) {
            _this.validate();
          }
          return false;
        };
      }

      AgeRange.prototype.show = function(previousResult) {
        var key, _i, _j, _len, _len1, _ref, _ref1, _results;
        this.result = previousResult || {};
        this.form.upper.value = 100;
        this.form.lower.value = 0;
        if (this.result.age_range) {
          _ref = this.list;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            key = _ref[_i];
            if (this.result.age_range[key]) {
              this.form[key].value = this.result.age_range[key];
            }
          }
        }
        this.el.style.display = 'block';
        _ref1 = this.list;
        _results = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          key = _ref1[_j];
          if (this.config[key]) {
            this.form[key].focus();
            break;
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      AgeRange.prototype.hide = function() {
        return this.el.style.display = 'none';
      };

      AgeRange.prototype.validate = function() {
        var key, _i, _len, _ref;
        if (!this.result.age_range) {
          this.result['age_range'] = {};
        }
        _ref = this.list;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          key = _ref[_i];
          if (this.config[key]) {
            if (isNaN(this.form[key].value)) {
              return;
            }
            this.result.age_range[key] = parseInt(this.form[key].value);
          }
        }
        if (this.result.age_range.lower > this.result.age_range.upper) {
          alert('年龄上限需要高于下限');
          return;
        }
        this.trigger(AgeRange.Events.USER_DONE, this.getResult());
      };

      AgeRange.prototype.getResult = function() {
        return this.result;
      };

      return AgeRange;

    })();
    return AgeRange;
  });

}).call(this);
