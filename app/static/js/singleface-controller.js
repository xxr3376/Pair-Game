// Generated by CoffeeScript 1.6.3
(function() {
  define(['util/type', 'helper/events'], function(type, Events) {
    var SingleFaceController;
    SingleFaceController = (function() {
      function SingleFaceController(options) {
        var _this = this;
        this.face = null;
        this.box = null;
        this.padding = 1.5;
        this.iv = options.iv, this.mousetrap = options.mousetrap;
        this.display = true;
        this.mousetrap.bind('space', function(e) {
          e.preventDefault();
          if (_this.display) {
            _this.iv.boxEl.className = 'box hide';
            _this.display = false;
          } else {
            _this.iv.boxEl.className = 'box';
            _this.display = true;
          }
        });
      }

      SingleFaceController.prototype.setData = function(data) {
        return this.face = data.basic_points;
      };

      SingleFaceController.prototype.show = function(roll) {
        var box, face, maxX, maxY, minX, minY, p, paddingX, paddingY, _i, _len, _ref;
        if (!this.box) {
          this.box = document.createElement('div');
          this.box.className = 'bounding-box';
          this.iv.boxEl.appendChild(this.box);
        }
        minX = maxX = this.face[0][0];
        minY = maxY = this.face[0][1];
        _ref = this.face;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          p = _ref[_i];
          minX = Math.min(minX, p[0]);
          minY = Math.min(minY, p[1]);
          maxX = Math.max(maxX, p[0]);
          maxY = Math.max(maxY, p[1]);
        }
        paddingX = (maxX - minX) / 2;
        paddingY = (maxY - minY) / 2;
        box = this.box;
        box.style.left = "" + (minX - paddingX - 5) + "px";
        box.style.top = "" + (minY - paddingY - 5) + "px";
        box.style.width = "" + (maxX - minX + 2 * paddingX) + "px";
        box.style.height = "" + (maxY - minY + 1.7 * paddingY) + "px";
        box.style.pointerEvents = "none";
        face = {
          width: (maxX - minX) * (1 + 2 * this.padding),
          height: (maxY - minY) * (1 + 2 * this.padding),
          x: (maxX + minX) / 2,
          y: (maxY + minY) / 2
        };
        if (roll && this.face.length === 4) {
          this.iv.rollImage(this.face[0], this.face[1], face);
        }
        return this.iv.center(face);
      };

      SingleFaceController.prototype.hide = function() {
        this.box.remove();
        return this.box = null;
      };

      return SingleFaceController;

    })();
    return SingleFaceController;
  });

}).call(this);
