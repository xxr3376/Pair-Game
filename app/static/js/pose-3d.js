// Generated by CoffeeScript 1.6.3
(function() {
  define(["util/type", "helper/events", "status-bar"], function(type, Events, statusBar) {
    var FAR, HEIGHT, NEAR, Pose3D, WIDTH;
    WIDTH = window.innerWidth;
    HEIGHT = window.innerHeight;
    NEAR = 1;
    FAR = 1000;
    Pose3D = (function() {
      Events.mixin(Pose3D);

      Pose3D.Events = type.createEnum(["USER_DONE"]);

      function Pose3D(options) {
        var beginRotate, camera, doneBtn, down, e, endRotate, gldom, loader, loop_, mesh, meshMaterial, meshWireMaterial, pointLight, renderer, scene,
          _this = this;
        this.options = options || {};
        this.mousetrap = options.mousetrap, this.iv = options.iv;
        this.stopped = true;
        renderer = void 0;
        try {
          renderer = new THREE.WebGLRenderer({
            antialias: true
          });
        } catch (_error) {
          e = _error;
          renderer = new THREE.CanvasRenderer();
        }
        renderer.setSize(WIDTH, HEIGHT);
        scene = new THREE.Scene();
        camera = new THREE.OrthographicCamera(WIDTH / -2, WIDTH / 2, HEIGHT / 2, HEIGHT / -2, NEAR, FAR);
        camera.position.z = 200;
        scene.add(camera);
        loader = new THREE.JSONLoader();
        mesh = void 0;
        meshMaterial = void 0;
        meshWireMaterial = void 0;
        loader.load("/static/model/face.min.json", function(geometry, materials) {
          geometry.computeVertexNormals();
          meshMaterial = new THREE.MeshFaceMaterial(materials);
          meshWireMaterial = new THREE.MeshBasicMaterial({
            color: 0x1A4FFF,
            wireframe: true
          });
          mesh = _this.mesh = new THREE.Mesh(geometry, meshMaterial);
          mesh.scale.set(80, 80, 80);
          mesh.position.y = 0;
          mesh.position.x = 0;
          mesh.rotation.order = "ZXY";
          return scene.add(mesh);
        });
        pointLight = new THREE.PointLight(0xFFFFFF);
        pointLight.position.x = 0;
        pointLight.position.y = 500;
        pointLight.position.z = 500;
        scene.add(pointLight);
        pointLight = new THREE.PointLight(0xFFFFFF);
        pointLight.position.x = 0;
        pointLight.position.y = -500;
        pointLight.position.z = 500;
        scene.add(pointLight);
        gldom = this.el = renderer.domElement;
        gldom.style.cssText = "position:absolute;top:0;right:0;display:none;";
        this.iv.wrapEl.appendChild(this.el);
        loop_ = function() {
          var RAD2DEG, scale;
          if (!_this.stopped) {
            window.requestAnimationFrame(loop_);
          }
          if (_this.options.noModify) {
            scale = _this.result.pose_3d.scale * _this.iv.transform.scale * 4 / 9;
            mesh.scale.set(scale, scale, scale);
          }
          RAD2DEG = 180 / Math.PI;
          if (!_this.options.noStatus) {
            statusBar.status = "Roll: " + (mesh.rotation.z * RAD2DEG).toFixed(3) + ", Pitch: " + (mesh.rotation.x * RAD2DEG).toFixed(3) + ", Yaw: " + (mesh.rotation.y * RAD2DEG).toFixed(3);
          }
          return renderer.render(scene, camera);
        };
        this.show = function(previousResult) {
          var p3d, q, scale;
          _this.stopped = false;
          _this.result = previousResult;
          if (previousResult && previousResult.pose_3d) {
            if (previousResult.pose_3d) {
              p3d = previousResult.pose_3d;
              q = new THREE.Quaternion(p3d.x, p3d.y, p3d.z, p3d.w);
              mesh.rotation.setFromQuaternion(q);
              scale = p3d.scale * _this.iv.transform.scale * 4 / 9;
              mesh.scale.set(scale, scale, scale);
            }
          } else {
            mesh.rotation.set(0, 0, 0);
            mesh.scale.set(80, 80, 80);
          }
          if (!_this.options.noModify) {
            _this.doneBtn.style.display = "block";
          }
          _this.el.style.display = "block";
          return loop_();
        };
        if (!this.options.noModify) {
          doneBtn = this.doneBtn = document.createElement("button");
          doneBtn.className = "btn";
          doneBtn.innerText = "Finish";
          doneBtn.style.left = "0";
          doneBtn.style.bottom = "80px";
          doneBtn.style.display = "none";
          doneBtn.onclick = function() {
            return _this.trigger(Pose3D.Events.USER_DONE, _this.getResult());
          };
          document.body.appendChild(doneBtn);
          this.mousetrap.bind(['w', 's', 'a', 'd', 'q', 'e', 'W', 'S', 'A', 'D', 'Q', 'E'], function(e) {
            var char, m, n, r, t;
            m = new THREE.Matrix4();
            t = new THREE.Matrix4();
            n = new THREE.Matrix4();
            r = new THREE.Euler();
            char = String.fromCharCode(e.keyCode);
            switch (char) {
              case 'q':
                r.set(0, 0, 0.01, 'ZXY');
                break;
              case 'Q':
                r.set(0, 0, 0.1, 'ZXY');
                break;
              case 'e':
                r.set(0, 0, -0.01, 'ZXY');
                break;
              case 'E':
                r.set(0, 0, -0.1, 'ZXY');
                break;
              case 'a':
                r.set(0, -0.01, 0, 'ZXY');
                break;
              case 'A':
                r.set(0, -0.1, 0, 'ZXY');
                break;
              case 'd':
                r.set(0, 0.01, 0, 'ZXY');
                break;
              case 'D':
                r.set(0, 0.1, 0, 'ZXY');
                break;
              case 's':
                r.set(0.01, 0, 0, 'ZXY');
                break;
              case 'S':
                r.set(0.1, 0, 0, 'ZXY');
                break;
              case 'w':
                r.set(-0.01, 0, 0, 'ZXY');
                break;
              case 'W':
                r.set(-0.1, 0, 0, 'ZXY');
            }
            m.makeRotationFromEuler(mesh.rotation);
            t.makeRotationFromEuler(r);
            n.multiplyMatrices(m, t);
            return mesh.rotation.setFromRotationMatrix(n, 'ZXY');
          });
        }
        this.mousetrap.bind(['u', 'o', 'j', 'l', 'i', 'k', 'U', 'O', 'I', 'K', 'H', 'L'], function(e) {
          var char;
          char = String.fromCharCode(e.keyCode);
          switch (char) {
            case 'u':
              return mesh.rotation.z += 0.01;
            case 'U':
              return mesh.rotation.z += 0.1;
            case 'o':
              return mesh.rotation.z -= 0.01;
            case 'O':
              return mesh.rotation.z -= 0.1;
            case 'j':
              return mesh.rotation.y -= 0.01;
            case 'J':
              return mesh.rotation.y -= 0.1;
            case 'l':
              return mesh.rotation.y += 0.01;
            case 'L':
              return mesh.rotation.y += 0.1;
            case 'k':
              return mesh.rotation.x += 0.01;
            case 'K':
              return mesh.rotation.x += 0.1;
            case 'i':
              return mesh.rotation.x -= 0.01;
            case 'I':
              return mesh.rotation.x -= 0.1;
          }
        });
        this.mousetrap.bind("t", function() {
          if (mesh.material === meshWireMaterial) {
            renderer.domElement.style.opacity = 1;
            return mesh.material = meshMaterial;
          } else {
            renderer.domElement.style.opacity = 0.7;
            return mesh.material = meshWireMaterial;
          }
        });
        beginRotate = null;
        endRotate = null;
        down = false;
        if (!this.options.noModify) {
          gldom.addEventListener("mousedown", function(e) {
            if (e.button === 0) {
              e.preventDefault();
              e.stopPropagation();
              down = true;
              return beginRotate = new THREE.Vector3(e.clientX - gldom.offsetLeft, e.clientY - gldom.offsetTop, 3000);
            }
          });
          gldom.addEventListener("mousemove", function(e) {
            var angle, axis;
            if (down) {
              e.preventDefault();
              e.stopPropagation();
              endRotate = new THREE.Vector3(e.clientX - gldom.offsetLeft, e.clientY - gldom.offsetTop, 3000);
              if (endRotate.distanceToSquared(beginRotate) < 0.5) {
                return;
              }
              angle = Math.acos(beginRotate.dot(endRotate) / beginRotate.length() / endRotate.length()) * 8;
              axis = beginRotate.cross(endRotate).normalize();
              mesh.rotateOnAxis(axis, angle);
              return beginRotate = endRotate;
            }
          });
          gldom.addEventListener("mouseleave", function(e) {
            e.preventDefault();
            return down = false;
          });
          gldom.addEventListener("mousewheel", function(e) {
            var delta;
            e.preventDefault();
            if (e.shiftKey) {
              e.stopPropagation();
              delta = e.wheelDelta / 120;
              if (mesh.scale.x + delta > 0) {
                return mesh.scale.addScalar(delta);
              }
            }
          });
          gldom.addEventListener("mouseup", function(e) {
            e.preventDefault();
            return down = false;
          });
        }
      }

      Pose3D.prototype.hide = function() {
        this.stopped = true;
        this.el.style.display = "none";
        if (!this.options.noModify) {
          return this.doneBtn.style.display = "none";
        }
      };

      Pose3D.prototype.getResult = function() {
        var q;
        if (!this.result) {
          this.result = {};
        }
        q = new THREE.Quaternion();
        q.setFromEuler(this.mesh.rotation);
        this.result.pose_3d = {
          x: q.x,
          y: q.y,
          z: q.z,
          w: q.w,
          scale: this.mesh.scale.x * 9 / 4 / this.iv.transform.scale
        };
        return this.result;
      };

      Pose3D.prototype.setSize = function(s) {
        s *= 4 / 9;
        return this.mesh.scale.set(s, s, s);
      };

      return Pose3D;

    })();
    return Pose3D;
  });

}).call(this);
