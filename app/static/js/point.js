// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(["util/type", "helper/events", "status-bar", "jquery", "image-viewer"], function(type, Events, statusBar, $, ImageViewer) {
    var MIN_SCALE, Point;
    MIN_SCALE = 0.5;
    Point = (function() {
      Events.mixin(Point);

      Point.Events = type.createEnum(["USER_DONE", "USER_EXIT"]);

      Point.status = type.createEnum(["ENABLE", "DISABLE"]);

      function Point(options) {
        this._updateTransform = __bind(this._updateTransform, this);
        var cancelBtn, doneBtn,
          _this = this;
        this.status = Point.status.DISABLE;
        this.mousetrap = options.mousetrap, this.iv = options.iv;
        this.clearData = function() {
          _this.result = null;
          _this.scale = 1;
          _this.pointsLeft = 4;
          _this.pointEl = [];
          _this.pointPos = [];
          _this.lastPosition = [0, 0];
          _this._updatePending = false;
          return _this.status = Point.status.DISABLE;
        };
        this.clearData();
        this.pointNames = ["leftEye", "rightEye", "leftMouth", "rightMouth"];
        doneBtn = this.doneBtn = document.createElement("button");
        doneBtn.className = "btn";
        doneBtn.innerText = "完成(Tab)";
        doneBtn.style.left = "0";
        doneBtn.style.bottom = "80px";
        doneBtn.style.display = "none";
        doneBtn.onclick = function() {
          if (_this.vaildate()) {
            return _this.trigger(Point.Events.USER_DONE, _this.getResult());
          }
        };
        cancelBtn = this.cancelBtn = document.createElement("button");
        cancelBtn.className = "btn";
        cancelBtn.innerText = "取消(ESC)";
        cancelBtn.style.left = "0";
        cancelBtn.style.bottom = "120px";
        cancelBtn.style.display = "none";
        cancelBtn.onclick = function() {
          return _this.trigger(Point.Events.USER_EXIT);
        };
        this.mousetrap.bind("tab", function(e) {
          e.preventDefault();
          console.log(_this.status);
          if (_this.status === Point.status.ENABLE) {
            return _this.doneBtn.click();
          }
        });
        this.mousetrap.bind("esc", function(e) {
          e.preventDefault();
          if (_this.status === Point.status.ENABLE) {
            return _this.cancelBtn.click();
          }
        });
        document.body.appendChild(doneBtn);
        document.body.appendChild(cancelBtn);
        this.iv.on(ImageViewer.SCALE, function(scale) {
          var newScale;
          newScale = 1 / scale;
          if (newScale > MIN_SCALE) {
            _this.scale = newScale;
          }
          return _this.applyTransform();
        });
        return;
      }

      Point.prototype.addPoint = function(x, y) {
        var point;
        this.pointPos.push([x, y]);
        point = document.createElement("div");
        point.className = "point";
        point.title = this.pointNames[this.pointNames.length - this.pointsLeft];
        point.dataset.id = this.pointPos.length - 1;
        this.iv.coverEl.appendChild(point);
        this.pointEl.push(point);
        this.pointsLeft--;
        this.applyTransform();
      };

      Point.prototype._updateTransform = function() {
        var i, pointEl, pos, style, transformStyle, _i, _ref, _results;
        this._updatePending = false;
        _results = [];
        for (i = _i = 0, _ref = this.pointEl.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          pointEl = this.pointEl[i];
          pos = this.pointPos[i];
          transformStyle = "translate(" + pos[0] + "px, " + pos[1] + "px) scale(" + this.scale + ")";
          style = pointEl.style;
          style.transform = transformStyle;
          style.mozTransform = transformStyle;
          _results.push(style.webkitTransform = transformStyle);
        }
        return _results;
      };

      Point.prototype.applyTransform = function() {
        if (this._updatePending !== true) {
          this._updatePending = true;
          return window.requestAnimationFrame(this._updateTransform);
        }
      };

      Point.prototype.show = function(previousResult) {
        var drag, dragPoint, p, result, _i, _len, _ref,
          _this = this;
        this.clearData();
        this.status = Point.status.ENABLE;
        if (previousResult) {
          result = this.result = previousResult;
          _ref = result.basic_points;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            p = _ref[_i];
            this.addPoint(p[0], p[1]);
          }
        }
        this.doneBtn.style.display = "block";
        this.cancelBtn.style.display = "block";
        drag = false;
        dragPoint = false;
        $(this.iv.coverEl).on("mousedown", function(e) {
          drag = true;
          if (e.button === 0 && e.target.className === "point") {
            dragPoint = +e.target.dataset.id;
          }
          _this.lastPosition = [e.pageX, e.pageY];
        });
        $(this.iv.coverEl).on("mousemove", function(e) {
          var dx, dy, helper, x, y;
          helper = "Points Left: " + _this.pointsLeft;
          if (e.target.className === "point") {
            helper = e.target.title;
          }
          dx = e.pageX - _this.lastPosition[0];
          dy = e.pageY - _this.lastPosition[1];
          _this.lastPosition = [e.pageX, e.pageY];
          if (dragPoint !== false) {
            x = dx / _this.iv.transform.scale;
            y = dy / _this.iv.transform.scale;
            _this.pointPos[dragPoint][0] += x;
            _this.pointPos[dragPoint][1] += y;
            _this.applyTransform();
          }
        });
        return $(this.iv.coverEl).on("mouseleave mouseup", function(e) {
          var x, y;
          if (drag) {
            if (e.button === 0 && dragPoint !== false && e.shiftKey) {
              if (dragPoint === 3) {
                _this.iv.coverEl.removeChild(_this.pointEl[dragPoint]);
                _this.pointEl.splice(dragPoint, 1);
                _this.pointPos.splice(dragPoint, 1);
              }
            }
            if (e.button === 0 && dragPoint === false && e.target.tagName === "DIV" && e.target.className === "cover") {
              if (_this.pointsLeft > 0) {
                x = e.offsetX;
                y = e.offsetY;
                _this.addPoint(x, y);
              }
            }
            drag = false;
            dragPoint = false;
          }
        });
      };

      Point.prototype.hide = function() {
        this.status = Point.status.DISABLE;
        this.doneBtn.style.display = "none";
        this.cancelBtn.style.display = "none";
        this.iv.clear();
      };

      Point.prototype.vaildate = function() {
        var result;
        result = this.pointPos;
        if (result.length === 0) {
          this.trigger(Point.Events.USER_EXIT);
          return false;
        }
        if (result.length <= 2) {
          alert("需标注 3~4 点");
          return false;
        }
        return true;
      };

      Point.prototype.getResult = function() {
        if (this.result === null) {
          this.result = {};
        }
        this.result.basic_points = this.pointPos;
        return this.result;
      };

      return Point;

    })();
    return Point;
  });

}).call(this);
